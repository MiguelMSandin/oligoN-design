#!/usr/bin/env python3

import argparse
from Bio import SeqIO
from Bio.Seq import Seq
import sys
import time

start_time = time.time()

parser = argparse.ArgumentParser(description="From a targeted fasta file (t/target), find all possible specific primers/probes of length 'l', that matches at least 'm%' of the sequences (or 'M' sequences) in the targeted file and has a maximum specificity of 's%' of the sequences (or 'S' sequences) to the reference (r/reference) database.",
								 epilog="*The basic melting temperature (Tm) is an approximation and should be considered as a baseline for comparison. Briefly, for short primers (<14 bp): Tm = 2*(A+T) + 4*(G+C); and for longer primers (>13 bp): Tm = 64.9 + 41*(G+C - 16.4) / (A+G+C+T); where A, C, G and T are the number of bases of A, G, C and T respectively.")

# Add the arguments to the parser
requiredArgs = parser.add_argument_group('required arguments')

requiredArgs.add_argument("-t", "--target", dest="target", required=True,
					help="A fasta file with the sequences you want to find a primer/probe to.")

requiredArgs.add_argument("-r", "--reference", dest="reference", required=True,
					help="A reference file to search against. The targeted group shouldn't be included in the reference.")

parser.add_argument("-o", "--output", dest="output", required=False,
					default=None,
					help="The name of the output fasta and log files. Please note the extensions '.fasta' and '.tsv' will be added to the given name ('output.fasta' and 'output.tsv'). The output file contains the follwing columns: the primer name, the length of the sequence, the sequence, the reverse complement sequence (if selected), the GC content, the basic melting temperature*, the proportion of hits in the reference file, the number of hits in the reference file, the proportion of hits in the target file and the number of hits in the target file. By default will add '_probes.fasta' and '_probes.tsv' to the target file.")

parser.add_argument("-l", "--length", dest="length", nargs="+", required=False, action='store', type=str,
					default=['18-22'],
					help="The desire length of the primers to be searched. A range can be specified with the '-' sign. By default it will look for primers of length 18, 19, 20, 21 and 22 base pairs ('18-22'). A decreasing range could be given, increasing speed and avoiding redundancy of smaller potential primers (i.e.; '22-18').")

parser.add_argument("-s", "--specificity", dest="specificity", required=False, action='store', type=float,
					default=0.01,
					help="The maximum percentage of sequences that can contain the primer in the reference file (0 >= s >= 1). Default = 0.01")

parser.add_argument("-m", "--minimum", dest="minimum", required=False, action='store', type=float,
					default=0.8,
					help="The minimum percentage of sequences that the primer has to appear in the target file (0 >= m >= 1). Default = 0.8")

parser.add_argument("-S", "--specificityAbs", dest="specificityAbs", required=False, action='store', type=int,
					default=None,
					help="Same as '-s/--specificity' but absolute values. If chosen, will override the value given by '-s/--specificity'.")

parser.add_argument("-M", "--minimumAbs", dest="minimumAbs", required=False, action='store', type=int,
					default=None,
					help="Same as '-m/--minimum' but absolute values. If chosen, will override the value given by '-m/--minimum'")

parser.add_argument("-p", "--probes", dest="probes", required=False, action="store_true",
					help="If selected, will also export a fasta file with the reverse complement sequences to 'output_revCom.fasta'.")

parser.add_argument("-v", "--verbose", dest="verbose", required=False, action="store_false",
					help="If selected, will not print information to the console.")

parser.add_argument("--version", action='version',
					version='oligoN-design %(prog)s v0.2.0-beta',
					help='Show the version number and exit.')

args = parser.parse_args()

if args.verbose:
	print("  Setting variables...", flush=True)

# Setting the range of lengths _____________________________________________________________________
lengths = list()
for l in args.length:
	if '-' in l:
		if l.count('-') > 1:
			print("    Warning! More than one range has been specified. Taking only the first two elements...", flush=True)
		first = l.split('-')[0]
		last = l.split('-')[1]
		if first < last:
			for l2 in range(int(first), int(last)+1):
				lengths.append(int(l2))
		elif first > last:
			for l2 in range(int(first), int(last)-1, -1):
				lengths.append(int(l2))
	else:
		lengths.append(int(l))

if args.verbose:
	print("    Lengths:    ", *lengths, flush=True)

# Setting the specificities ________________________________________________________________________
if args.specificityAbs is not None:
	specificity = args.specificityAbs
	if args.verbose:
		print("    Specificity:", specificity, "sequences", flush=True)
else:
	specificity = args.specificity
	if args.verbose:
		print("    Specificity:", specificity*100, "%", flush=True)

if args.minimumAbs is not None:
	minimum = args.minimumAbs
	if args.verbose:
		print("    Minimum:", minimum, "sequences", flush=True)
else:
	minimum =args.minimum
	if args.verbose:
		print("    Minimum:    ", minimum*100, "%", flush=True)

# Reading target file ______________________________________________________________________________
if args.verbose:
	print("  Reading target file...", end="", flush=True)

target = {}
w1 = 0
for line in SeqIO.parse(open(args.target), "fasta"):
	target[line.id] = str(line.seq.upper())
	if "-" in line.seq:
		w1 += 1

if args.verbose:
	print("\r    Sequences in target file ('", str(args.target), "'):   ", len(target), sep="", flush=True)
	if w1 > 0:
		print("    Warning!!", args.target, "contains gaps", flush=True)

# Reading reference file ___________________________________________________________________________
if args.verbose:
	print("  Reading reference file...", end="", flush=True)

ref = {}
w2 = 0
for line in SeqIO.parse(open(args.reference), "fasta"):
	ref[line.id] = str(line.seq.upper())
	if "-" in line.seq:
		w2 += 1

if args.verbose:
	print("\r    Sequences in reference file ('", str(args.reference), "'):   ", len(ref), sep="", flush=True)
	if w2 > 0:
		print("    Warning!!", args.reference, "contains gaps", flush=True)

# Setting output file name _________________________________________________________________________
if args.output is None:
	import re
	output = re.sub("\\.[^\\.]+$", "_probes", args.target)
else:
	output = args.output

# Start the search _________________________________________________________________________________
primers = set()
logFile = str(output + ".tsv")
fasFile = str(output + ".fasta")
with open(logFile, "w", buffering=1) as logfile, open(fasFile, "w", buffering=1) as fasfile:
	print("identifier\tlength\tsequence\trevCom\tGC\tTm\thitsT\thitsT_abs\thitsR\thitsR_abs", file=logfile)
	for length in lengths:  # Loop through the different lengths
		if args.verbose:
			print("  Searching oligos of", str(length), "base pairs...", end="", flush=True)
			i = 0
			pcti = 0
		uniques = set()
		for tseq in target.values():  # Loop through all the sequences in the target file
			lentseq = len(tseq)
			for p in range(0, lentseq-length+1):
				pprimer = tseq[int(p):(int(p+length))] # Split the given sequence in oligonucleotides of length 'length'
				if pprimer not in uniques:
					uniques.add(pprimer)
		if args.verbose:
			print("\r  Searching oligos of", str(length), "base pairs in", len(uniques), "unique oligos in target file", flush=True)
		tocheck = {}
		for pprimer in uniques:  # Loop through all unique oligonucleotides
			if args.verbose:
				i += 1
				pct = round(i/len(uniques)*100)
				if pct > pcti:
					pcti = pct
					print("\r    Checking minimum presence...\t", pct, "%", sep="", end="", flush=True)
			if pprimer not in tocheck.keys():
				if (sum(pprimer in i for i in primers) == 0):
					countTarget = sum(pprimer in i for i in target.values())
					if args.minimumAbs is None:
						R = countTarget/len(target)
					else:
						R = countTarget
					if R >= minimum:
						tocheck[pprimer] = countTarget
		if args.verbose:
			print("\r   ", len(tocheck), "potential oligos passed the minimum presence criteria in the target file", flush=True)
			i = 0
			pcti = 0
			count = 0
		for pprimer, countTarget in tocheck.items():  # Loop through all oligonucleotides that passed the minimum criteria
			if args.verbose:
				i += 1
				pct = round(i/len(tocheck)*100)
				if pct > pcti:
					pcti = pct
					print("\r    Checking specificity...\t", pct, "%", sep="", end="", flush=True)
			countRef = sum(pprimer in i for i in ref.values())
			if args.specificityAbs is None:
				C = countRef/len(ref)
			else:
				C = countRef
			if C <= specificity:
				primers.add(pprimer)
				count += 1
				# Estimate the GC content
				gcs = pprimer.upper().count("G") + pprimer.upper().count("C")
				length = len(pprimer)
				GC = round((gcs) / length, 4)
				# Estimate the theoretical melting temperature
				if length < 14:
					Tm = 2 * (pprimer.upper().count("A") + pprimer.upper().count("T")) + 4 * (gcs)
				else:
					Tm = 64.9 + 41*(gcs - 16.4) / length
				Tm = round(Tm, 2)
				pprimer_revCom = Seq(pprimer).reverse_complement()
				# And export
				print("oligoN" + str(len(primers)) + "\t" + str(len(pprimer)) + "\t" + str(pprimer) + "\t" + str(pprimer_revCom) + "\t" + str(GC) + "\t" + str(Tm) + "\t" + str(countTarget/len(target)) + "\t" + str(countTarget) + "\t" + str(countRef/len(ref)) + "\t" + str(countRef), file=logfile, flush=True)
				print(">oligoN" + str(len(primers)) + "\n" + str(pprimer), file=fasfile, flush=True)
		if args.verbose:
			print("\r   ", count, "potential oligos passed the specificity criteria in the reference file", flush=True)

if args.probes:
	if args.verbose:
		print("  Reverse-complementing all oligonucleotides...", flush=True)
	revFile = str(output + "_revCom.fasta")
	with open(revFile, "w", buffering=1) as revfile:
		for p in SeqIO.parse(open(fasFile), "fasta"):
			print(">" + str(p.id) + "_revCom\n" + str(p.seq.reverse_complement()), file=revfile, flush=True)

if args.verbose:
	t = time.time() - start_time
	seconds = t % (24 * 3600)
	hour = seconds // 3600
	seconds %= 3600
	minutes = seconds // 60
	seconds %= 60
	print("\n  It took %d hours %02d minutes and %02d seconds to complete" % (hour, minutes, seconds), flush=True)
	c = len(primers)
	if c == 0:
		print("  No oligonucleotides were found with the given parameters...", sep="", flush=True)
	if c > 0:
		print("  In total", c, "potential oligonucleotides have been exported to:")
		print("    ", fasFile, ": contains all potential oligonucleotides in fasta format", sep="", flush=True)
		if args.probes:
			print("    ", revFile, ": contains the reverse complement of all potential oligonucleotides in fasta format", sep="", flush=True)
		print("    ", logFile, ": contains all parameters of the search for each potential oligonucleotide in tsv format", sep="", flush=True)
	print("Done")
